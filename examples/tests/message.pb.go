// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: examples/tests/message.proto

package tests

import (
	_ "github.com/arrakis-digital/protoc-gen-redact/v3/redact/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestEnum int32

const (
	TestEnum_ValueZero TestEnum = 0
	TestEnum_ValueOne  TestEnum = 1
	TestEnum_ValueTwo  TestEnum = 2
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "ValueZero",
		1: "ValueOne",
		2: "ValueTwo",
	}
	TestEnum_value = map[string]int32{
		"ValueZero": 0,
		"ValueOne":  1,
		"ValueTwo":  2,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_tests_message_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_examples_tests_message_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{0}
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue    float32                   `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue   float64                   `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	Int32Value    int32                     `protobuf:"varint,6,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64                     `protobuf:"varint,8,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32                    `protobuf:"varint,10,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64                    `protobuf:"varint,12,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32                     `protobuf:"zigzag32,14,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64                     `protobuf:"zigzag64,16,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32                    `protobuf:"fixed32,18,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64                    `protobuf:"fixed64,20,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32                     `protobuf:"fixed32,22,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64                     `protobuf:"fixed64,24,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue     bool                      `protobuf:"varint,26,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string                    `protobuf:"bytes,28,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue    []byte                    `protobuf:"bytes,30,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	EnumValue     TestEnum                  `protobuf:"varint,32,opt,name=enum_value,json=enumValue,proto3,enum=tests.TestEnum" json:"enum_value,omitempty"`
	MessageNil    *TestMessage              `protobuf:"bytes,34,opt,name=message_nil,json=messageNil,proto3" json:"message_nil,omitempty"`
	MessageSkip   *TestMessage              `protobuf:"bytes,35,opt,name=message_skip,json=messageSkip,proto3" json:"message_skip,omitempty"`
	MessageEmpty  *TestMessage              `protobuf:"bytes,36,opt,name=message_empty,json=messageEmpty,proto3" json:"message_empty,omitempty"`
	Map1Empty     map[int64]string          `protobuf:"bytes,39,rep,name=map1_empty,json=map1Empty,proto3" json:"map1_empty,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2Empty     map[string]*emptypb.Empty `protobuf:"bytes,40,rep,name=map2_empty,json=map2Empty,proto3" json:"map2_empty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map1Nested    map[int64]string          `protobuf:"bytes,41,rep,name=map1_nested,json=map1Nested,proto3" json:"map1_nested,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2Nested    map[string]*emptypb.Empty `protobuf:"bytes,42,rep,name=map2_nested,json=map2Nested,proto3" json:"map2_nested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map1Item      map[int64]string          `protobuf:"bytes,43,rep,name=map1_item,json=map1Item,proto3" json:"map1_item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemNil   map[string]*emptypb.Empty `protobuf:"bytes,44,rep,name=map2_item_nil,json=map2ItemNil,proto3" json:"map2_item_nil,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemSkip  map[string]*emptypb.Empty `protobuf:"bytes,45,rep,name=map2_item_skip,json=map2ItemSkip,proto3" json:"map2_item_skip,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemEmpty map[string]*emptypb.Empty `protobuf:"bytes,46,rep,name=map2_item_empty,json=map2ItemEmpty,proto3" json:"map2_item_empty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_tests_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_tests_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *TestMessage) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *TestMessage) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *TestMessage) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *TestMessage) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *TestMessage) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *TestMessage) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *TestMessage) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *TestMessage) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *TestMessage) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *TestMessage) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *TestMessage) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *TestMessage) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *TestMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TestMessage) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *TestMessage) GetEnumValue() TestEnum {
	if x != nil {
		return x.EnumValue
	}
	return TestEnum_ValueZero
}

func (x *TestMessage) GetMessageNil() *TestMessage {
	if x != nil {
		return x.MessageNil
	}
	return nil
}

func (x *TestMessage) GetMessageSkip() *TestMessage {
	if x != nil {
		return x.MessageSkip
	}
	return nil
}

func (x *TestMessage) GetMessageEmpty() *TestMessage {
	if x != nil {
		return x.MessageEmpty
	}
	return nil
}

func (x *TestMessage) GetMap1Empty() map[int64]string {
	if x != nil {
		return x.Map1Empty
	}
	return nil
}

func (x *TestMessage) GetMap2Empty() map[string]*emptypb.Empty {
	if x != nil {
		return x.Map2Empty
	}
	return nil
}

func (x *TestMessage) GetMap1Nested() map[int64]string {
	if x != nil {
		return x.Map1Nested
	}
	return nil
}

func (x *TestMessage) GetMap2Nested() map[string]*emptypb.Empty {
	if x != nil {
		return x.Map2Nested
	}
	return nil
}

func (x *TestMessage) GetMap1Item() map[int64]string {
	if x != nil {
		return x.Map1Item
	}
	return nil
}

func (x *TestMessage) GetMap2ItemNil() map[string]*emptypb.Empty {
	if x != nil {
		return x.Map2ItemNil
	}
	return nil
}

func (x *TestMessage) GetMap2ItemSkip() map[string]*emptypb.Empty {
	if x != nil {
		return x.Map2ItemSkip
	}
	return nil
}

func (x *TestMessage) GetMap2ItemEmpty() map[string]*emptypb.Empty {
	if x != nil {
		return x.Map2ItemEmpty
	}
	return nil
}

type RepeatedM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValueEmpties    []float32      `protobuf:"fixed32,2,rep,packed,name=float_value_empties,json=floatValueEmpties,proto3" json:"float_value_empties,omitempty"`
	FloatValueNested     []float32      `protobuf:"fixed32,3,rep,packed,name=float_value_nested,json=floatValueNested,proto3" json:"float_value_nested,omitempty"`
	FloatValues          []float32      `protobuf:"fixed32,4,rep,packed,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	DoubleValueEmpties   []float64      `protobuf:"fixed64,6,rep,packed,name=double_value_empties,json=doubleValueEmpties,proto3" json:"double_value_empties,omitempty"`
	DoubleValueNested    []float64      `protobuf:"fixed64,7,rep,packed,name=double_value_nested,json=doubleValueNested,proto3" json:"double_value_nested,omitempty"`
	DoubleValues         []float64      `protobuf:"fixed64,8,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	Int32ValueEmpties    []int32        `protobuf:"varint,10,rep,packed,name=int32_value_empties,json=int32ValueEmpties,proto3" json:"int32_value_empties,omitempty"`
	Int32ValueNested     []int32        `protobuf:"varint,11,rep,packed,name=int32_value_nested,json=int32ValueNested,proto3" json:"int32_value_nested,omitempty"`
	Int32Values          []int32        `protobuf:"varint,12,rep,packed,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	Int64ValueEmpties    []int64        `protobuf:"varint,14,rep,packed,name=int64_value_empties,json=int64ValueEmpties,proto3" json:"int64_value_empties,omitempty"`
	Int64ValueNested     []int64        `protobuf:"varint,15,rep,packed,name=int64_value_nested,json=int64ValueNested,proto3" json:"int64_value_nested,omitempty"`
	Int64Values          []int64        `protobuf:"varint,16,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Uint32ValueEmpties   []uint32       `protobuf:"varint,18,rep,packed,name=uint32_value_empties,json=uint32ValueEmpties,proto3" json:"uint32_value_empties,omitempty"`
	Uint32ValueNested    []uint32       `protobuf:"varint,19,rep,packed,name=uint32_value_nested,json=uint32ValueNested,proto3" json:"uint32_value_nested,omitempty"`
	Uint32Values         []uint32       `protobuf:"varint,20,rep,packed,name=uint32_values,json=uint32Values,proto3" json:"uint32_values,omitempty"`
	Uint64ValueEmpties   []uint64       `protobuf:"varint,22,rep,packed,name=uint64_value_empties,json=uint64ValueEmpties,proto3" json:"uint64_value_empties,omitempty"`
	Uint64ValueNested    []uint64       `protobuf:"varint,23,rep,packed,name=uint64_value_nested,json=uint64ValueNested,proto3" json:"uint64_value_nested,omitempty"`
	Uint64Values         []uint64       `protobuf:"varint,24,rep,packed,name=uint64_values,json=uint64Values,proto3" json:"uint64_values,omitempty"`
	Sint32ValueEmpties   []int32        `protobuf:"zigzag32,26,rep,packed,name=sint32_value_empties,json=sint32ValueEmpties,proto3" json:"sint32_value_empties,omitempty"`
	Sint32ValueNested    []int32        `protobuf:"zigzag32,27,rep,packed,name=sint32_value_nested,json=sint32ValueNested,proto3" json:"sint32_value_nested,omitempty"`
	Sint32Values         []int32        `protobuf:"zigzag32,28,rep,packed,name=sint32_values,json=sint32Values,proto3" json:"sint32_values,omitempty"`
	Sint64ValueEmpties   []int64        `protobuf:"zigzag64,30,rep,packed,name=sint64_value_empties,json=sint64ValueEmpties,proto3" json:"sint64_value_empties,omitempty"`
	Sint64ValueNested    []int64        `protobuf:"zigzag64,31,rep,packed,name=sint64_value_nested,json=sint64ValueNested,proto3" json:"sint64_value_nested,omitempty"`
	Sint64Values         []int64        `protobuf:"zigzag64,32,rep,packed,name=sint64_values,json=sint64Values,proto3" json:"sint64_values,omitempty"`
	Fixed32ValueEmpties  []uint32       `protobuf:"fixed32,34,rep,packed,name=fixed32_value_empties,json=fixed32ValueEmpties,proto3" json:"fixed32_value_empties,omitempty"`
	Fixed32ValueNested   []uint32       `protobuf:"fixed32,35,rep,packed,name=fixed32_value_nested,json=fixed32ValueNested,proto3" json:"fixed32_value_nested,omitempty"`
	Fixed32Values        []uint32       `protobuf:"fixed32,36,rep,packed,name=fixed32_values,json=fixed32Values,proto3" json:"fixed32_values,omitempty"`
	Fixed64ValueEmpties  []uint64       `protobuf:"fixed64,38,rep,packed,name=fixed64_value_empties,json=fixed64ValueEmpties,proto3" json:"fixed64_value_empties,omitempty"`
	Fixed64ValueNested   []uint64       `protobuf:"fixed64,39,rep,packed,name=fixed64_value_nested,json=fixed64ValueNested,proto3" json:"fixed64_value_nested,omitempty"`
	Fixed64Values        []uint64       `protobuf:"fixed64,40,rep,packed,name=fixed64_values,json=fixed64Values,proto3" json:"fixed64_values,omitempty"`
	Sfixed32ValueEmpties []int32        `protobuf:"fixed32,42,rep,packed,name=sfixed32_value_empties,json=sfixed32ValueEmpties,proto3" json:"sfixed32_value_empties,omitempty"`
	Sfixed32ValueNested  []int32        `protobuf:"fixed32,43,rep,packed,name=sfixed32_value_nested,json=sfixed32ValueNested,proto3" json:"sfixed32_value_nested,omitempty"`
	Sfixed32Values       []int32        `protobuf:"fixed32,44,rep,packed,name=sfixed32_values,json=sfixed32Values,proto3" json:"sfixed32_values,omitempty"`
	Sfixed64ValueEmpties []int64        `protobuf:"fixed64,46,rep,packed,name=sfixed64_value_empties,json=sfixed64ValueEmpties,proto3" json:"sfixed64_value_empties,omitempty"`
	Sfixed64ValueNested  []int64        `protobuf:"fixed64,47,rep,packed,name=sfixed64_value_nested,json=sfixed64ValueNested,proto3" json:"sfixed64_value_nested,omitempty"`
	Sfixed64Values       []int64        `protobuf:"fixed64,48,rep,packed,name=sfixed64_values,json=sfixed64Values,proto3" json:"sfixed64_values,omitempty"`
	BoolValueEmpties     []bool         `protobuf:"varint,50,rep,packed,name=bool_value_empties,json=boolValueEmpties,proto3" json:"bool_value_empties,omitempty"`
	BoolValueNested      []bool         `protobuf:"varint,51,rep,packed,name=bool_value_nested,json=boolValueNested,proto3" json:"bool_value_nested,omitempty"`
	BoolValues           []bool         `protobuf:"varint,52,rep,packed,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
	StringValueEmpties   []string       `protobuf:"bytes,54,rep,name=string_value_empties,json=stringValueEmpties,proto3" json:"string_value_empties,omitempty"`
	StringValueNested    []string       `protobuf:"bytes,55,rep,name=string_value_nested,json=stringValueNested,proto3" json:"string_value_nested,omitempty"`
	StringValues         []string       `protobuf:"bytes,56,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	BytesValueEmpties    [][]byte       `protobuf:"bytes,58,rep,name=bytes_value_empties,json=bytesValueEmpties,proto3" json:"bytes_value_empties,omitempty"`
	BytesValueNested     [][]byte       `protobuf:"bytes,59,rep,name=bytes_value_nested,json=bytesValueNested,proto3" json:"bytes_value_nested,omitempty"`
	BytesValues          [][]byte       `protobuf:"bytes,60,rep,name=bytes_values,json=bytesValues,proto3" json:"bytes_values,omitempty"`
	EnumValueEmpties     []TestEnum     `protobuf:"varint,62,rep,packed,name=enum_value_empties,json=enumValueEmpties,proto3,enum=tests.TestEnum" json:"enum_value_empties,omitempty"`
	EnumValueNested      []TestEnum     `protobuf:"varint,63,rep,packed,name=enum_value_nested,json=enumValueNested,proto3,enum=tests.TestEnum" json:"enum_value_nested,omitempty"`
	EnumValues           []TestEnum     `protobuf:"varint,64,rep,packed,name=enum_values,json=enumValues,proto3,enum=tests.TestEnum" json:"enum_values,omitempty"`
	MessageNils          []*TestMessage `protobuf:"bytes,66,rep,name=message_nils,json=messageNils,proto3" json:"message_nils,omitempty"`
	MessageSkips         []*TestMessage `protobuf:"bytes,67,rep,name=message_skips,json=messageSkips,proto3" json:"message_skips,omitempty"`
	MessageNested        []*TestMessage `protobuf:"bytes,68,rep,name=message_nested,json=messageNested,proto3" json:"message_nested,omitempty"`
	MessageEmpties       []*TestMessage `protobuf:"bytes,69,rep,name=message_empties,json=messageEmpties,proto3" json:"message_empties,omitempty"`
}

func (x *RepeatedM) Reset() {
	*x = RepeatedM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_tests_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedM) ProtoMessage() {}

func (x *RepeatedM) ProtoReflect() protoreflect.Message {
	mi := &file_examples_tests_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedM.ProtoReflect.Descriptor instead.
func (*RepeatedM) Descriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedM) GetFloatValueEmpties() []float32 {
	if x != nil {
		return x.FloatValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetFloatValueNested() []float32 {
	if x != nil {
		return x.FloatValueNested
	}
	return nil
}

func (x *RepeatedM) GetFloatValues() []float32 {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *RepeatedM) GetDoubleValueEmpties() []float64 {
	if x != nil {
		return x.DoubleValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetDoubleValueNested() []float64 {
	if x != nil {
		return x.DoubleValueNested
	}
	return nil
}

func (x *RepeatedM) GetDoubleValues() []float64 {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *RepeatedM) GetInt32ValueEmpties() []int32 {
	if x != nil {
		return x.Int32ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetInt32ValueNested() []int32 {
	if x != nil {
		return x.Int32ValueNested
	}
	return nil
}

func (x *RepeatedM) GetInt32Values() []int32 {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *RepeatedM) GetInt64ValueEmpties() []int64 {
	if x != nil {
		return x.Int64ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetInt64ValueNested() []int64 {
	if x != nil {
		return x.Int64ValueNested
	}
	return nil
}

func (x *RepeatedM) GetInt64Values() []int64 {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *RepeatedM) GetUint32ValueEmpties() []uint32 {
	if x != nil {
		return x.Uint32ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetUint32ValueNested() []uint32 {
	if x != nil {
		return x.Uint32ValueNested
	}
	return nil
}

func (x *RepeatedM) GetUint32Values() []uint32 {
	if x != nil {
		return x.Uint32Values
	}
	return nil
}

func (x *RepeatedM) GetUint64ValueEmpties() []uint64 {
	if x != nil {
		return x.Uint64ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetUint64ValueNested() []uint64 {
	if x != nil {
		return x.Uint64ValueNested
	}
	return nil
}

func (x *RepeatedM) GetUint64Values() []uint64 {
	if x != nil {
		return x.Uint64Values
	}
	return nil
}

func (x *RepeatedM) GetSint32ValueEmpties() []int32 {
	if x != nil {
		return x.Sint32ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetSint32ValueNested() []int32 {
	if x != nil {
		return x.Sint32ValueNested
	}
	return nil
}

func (x *RepeatedM) GetSint32Values() []int32 {
	if x != nil {
		return x.Sint32Values
	}
	return nil
}

func (x *RepeatedM) GetSint64ValueEmpties() []int64 {
	if x != nil {
		return x.Sint64ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetSint64ValueNested() []int64 {
	if x != nil {
		return x.Sint64ValueNested
	}
	return nil
}

func (x *RepeatedM) GetSint64Values() []int64 {
	if x != nil {
		return x.Sint64Values
	}
	return nil
}

func (x *RepeatedM) GetFixed32ValueEmpties() []uint32 {
	if x != nil {
		return x.Fixed32ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetFixed32ValueNested() []uint32 {
	if x != nil {
		return x.Fixed32ValueNested
	}
	return nil
}

func (x *RepeatedM) GetFixed32Values() []uint32 {
	if x != nil {
		return x.Fixed32Values
	}
	return nil
}

func (x *RepeatedM) GetFixed64ValueEmpties() []uint64 {
	if x != nil {
		return x.Fixed64ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetFixed64ValueNested() []uint64 {
	if x != nil {
		return x.Fixed64ValueNested
	}
	return nil
}

func (x *RepeatedM) GetFixed64Values() []uint64 {
	if x != nil {
		return x.Fixed64Values
	}
	return nil
}

func (x *RepeatedM) GetSfixed32ValueEmpties() []int32 {
	if x != nil {
		return x.Sfixed32ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetSfixed32ValueNested() []int32 {
	if x != nil {
		return x.Sfixed32ValueNested
	}
	return nil
}

func (x *RepeatedM) GetSfixed32Values() []int32 {
	if x != nil {
		return x.Sfixed32Values
	}
	return nil
}

func (x *RepeatedM) GetSfixed64ValueEmpties() []int64 {
	if x != nil {
		return x.Sfixed64ValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetSfixed64ValueNested() []int64 {
	if x != nil {
		return x.Sfixed64ValueNested
	}
	return nil
}

func (x *RepeatedM) GetSfixed64Values() []int64 {
	if x != nil {
		return x.Sfixed64Values
	}
	return nil
}

func (x *RepeatedM) GetBoolValueEmpties() []bool {
	if x != nil {
		return x.BoolValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetBoolValueNested() []bool {
	if x != nil {
		return x.BoolValueNested
	}
	return nil
}

func (x *RepeatedM) GetBoolValues() []bool {
	if x != nil {
		return x.BoolValues
	}
	return nil
}

func (x *RepeatedM) GetStringValueEmpties() []string {
	if x != nil {
		return x.StringValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetStringValueNested() []string {
	if x != nil {
		return x.StringValueNested
	}
	return nil
}

func (x *RepeatedM) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *RepeatedM) GetBytesValueEmpties() [][]byte {
	if x != nil {
		return x.BytesValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetBytesValueNested() [][]byte {
	if x != nil {
		return x.BytesValueNested
	}
	return nil
}

func (x *RepeatedM) GetBytesValues() [][]byte {
	if x != nil {
		return x.BytesValues
	}
	return nil
}

func (x *RepeatedM) GetEnumValueEmpties() []TestEnum {
	if x != nil {
		return x.EnumValueEmpties
	}
	return nil
}

func (x *RepeatedM) GetEnumValueNested() []TestEnum {
	if x != nil {
		return x.EnumValueNested
	}
	return nil
}

func (x *RepeatedM) GetEnumValues() []TestEnum {
	if x != nil {
		return x.EnumValues
	}
	return nil
}

func (x *RepeatedM) GetMessageNils() []*TestMessage {
	if x != nil {
		return x.MessageNils
	}
	return nil
}

func (x *RepeatedM) GetMessageSkips() []*TestMessage {
	if x != nil {
		return x.MessageSkips
	}
	return nil
}

func (x *RepeatedM) GetMessageNested() []*TestMessage {
	if x != nil {
		return x.MessageNested
	}
	return nil
}

func (x *RepeatedM) GetMessageEmpties() []*TestMessage {
	if x != nil {
		return x.MessageEmpties
	}
	return nil
}

var File_examples_tests_message_proto protoreflect.FileDescriptor

var file_examples_tests_message_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x11, 0x0a, 0x0b, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x09, 0xda, 0xb6, 0x1a, 0x05, 0x15, 0xcd, 0xcc, 0x4c, 0x40, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xda, 0xb6,
	0x1a, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xda,
	0xb6, 0x1a, 0x02, 0x20, 0x20, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x27, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xda, 0xb6, 0x1a, 0x02, 0x28, 0x40, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xda, 0xb6, 0x1a, 0x02, 0x30, 0x20, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xda, 0xb6, 0x1a,
	0x02, 0x38, 0x40, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x42, 0x06, 0xda, 0xb6, 0x1a, 0x02, 0x40, 0x40, 0x52, 0x0b,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x07, 0xda, 0xb6, 0x1a, 0x03, 0x48, 0x80, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x42, 0x09,
	0xda, 0xb6, 0x1a, 0x05, 0x55, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0d,
	0xda, 0xb6, 0x1a, 0x09, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0c, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0e, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0f, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0x65, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0d,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a,
	0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0d, 0xda, 0xb6, 0x1a, 0x09, 0x69, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xda, 0xb6, 0x1a, 0x02, 0x70, 0x01, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xda, 0xb6, 0x1a, 0x16, 0x7a, 0x14, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1b,
	0xda, 0xb6, 0x1a, 0x17, 0x82, 0x01, 0x14, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0xda, 0xb6,
	0x1a, 0x03, 0x88, 0x01, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0x9a,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x69, 0x6c,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05,
	0x9a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6b,
	0x69, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x31, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x31, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x32, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x31, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x32, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0xda, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05, 0x1a, 0x03,
	0x7a, 0x01, 0x33, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x57, 0x0a,
	0x0d, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x69, 0x6c, 0x18, 0x2c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xda, 0xb6, 0x1a, 0x0a, 0xa2,
	0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x32, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x69, 0x6c, 0x12, 0x5a, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xda, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b,
	0x69, 0x70, 0x12, 0x5d, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0e, 0xda, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x54, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x32, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x31, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x32, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x61, 0x70, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x32,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x57, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x32, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xc3, 0x18, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x12, 0x39, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x09,
	0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x12,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x42, 0x0e, 0xda, 0xb6, 0x1a,
	0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x15, 0xcd, 0xcc, 0x4c, 0x40, 0x52, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x01, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x42, 0x12, 0xda, 0xb6, 0x1a, 0x0e, 0xa2, 0x01, 0x0b,
	0x1a, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40, 0x52, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x0b, 0xda, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x20, 0x20,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x13, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0b, 0xda, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04,
	0x1a, 0x02, 0x28, 0x40, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x09, 0xda, 0xb6, 0x1a,
	0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x0b, 0xda, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x30, 0x20, 0x52, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x04, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x04, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x04, 0x42, 0x0b, 0xda, 0xb6, 0x1a, 0x07,
	0xa2, 0x01, 0x04, 0x1a, 0x02, 0x38, 0x40, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x11, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x11, 0x42,
	0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x0d, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x11, 0x42, 0x0b, 0xda, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x40,
	0x40, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x12, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x12, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x12, 0x42, 0x0c,
	0xda, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05, 0x1a, 0x03, 0x48, 0x80, 0x01, 0x52, 0x0c, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x15, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x07, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x03, 0x28, 0x07, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x07, 0x42, 0x0e,
	0xda, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x55, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0d,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x06, 0x42, 0x09, 0xda, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x03, 0x28, 0x06, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x06, 0x42, 0x12, 0xda, 0xb6, 0x1a, 0x0e, 0xa2, 0x01, 0x0b, 0x1a, 0x09, 0x59, 0x40, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x16, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2a,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x14, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x15, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x2b,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x13, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x0e, 0xda,
	0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x65, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x16, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x10, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x14, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x15, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x10, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x30, 0x20, 0x03, 0x28, 0x10, 0x42, 0x12, 0xda, 0xb6, 0x1a, 0x0e, 0xa2, 0x01, 0x0b, 0x1a,
	0x09, 0x69, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x32, 0x20, 0x03, 0x28, 0x08, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x33, 0x20, 0x03, 0x28, 0x08, 0x42, 0x09,
	0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x08, 0x42,
	0x0b, 0xda, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x70, 0x01, 0x52, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x36, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x38, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xda, 0xb6, 0x1a, 0x1b, 0xa2, 0x01, 0x18,
	0x1a, 0x16, 0x7a, 0x14, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x09, 0xda,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0c,
	0x42, 0x20, 0xda, 0xb6, 0x1a, 0x1c, 0xa2, 0x01, 0x19, 0x1a, 0x17, 0x82, 0x01, 0x14, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0xda, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x3f,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0xda, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0f, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x40, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0xda, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05,
	0x1a, 0x03, 0x88, 0x01, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x6c,
	0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xda, 0xb6, 0x1a,
	0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0e, 0xda, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x73, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xda,
	0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xda, 0xb6, 0x1a, 0x0a, 0xa2,
	0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x2a, 0x35, 0x0a, 0x08, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5a, 0x65,
	0x72, 0x6f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x65,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x77, 0x6f, 0x10, 0x02,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x72, 0x72, 0x61, 0x6b, 0x69, 0x73, 0x2d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74,
	0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_examples_tests_message_proto_rawDescOnce sync.Once
	file_examples_tests_message_proto_rawDescData = file_examples_tests_message_proto_rawDesc
)

func file_examples_tests_message_proto_rawDescGZIP() []byte {
	file_examples_tests_message_proto_rawDescOnce.Do(func() {
		file_examples_tests_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_examples_tests_message_proto_rawDescData)
	})
	return file_examples_tests_message_proto_rawDescData
}

var file_examples_tests_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_examples_tests_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_examples_tests_message_proto_goTypes = []interface{}{
	(TestEnum)(0),         // 0: tests.TestEnum
	(*TestMessage)(nil),   // 1: tests.TestMessage
	(*RepeatedM)(nil),     // 2: tests.RepeatedM
	nil,                   // 3: tests.TestMessage.Map1EmptyEntry
	nil,                   // 4: tests.TestMessage.Map2EmptyEntry
	nil,                   // 5: tests.TestMessage.Map1NestedEntry
	nil,                   // 6: tests.TestMessage.Map2NestedEntry
	nil,                   // 7: tests.TestMessage.Map1ItemEntry
	nil,                   // 8: tests.TestMessage.Map2ItemNilEntry
	nil,                   // 9: tests.TestMessage.Map2ItemSkipEntry
	nil,                   // 10: tests.TestMessage.Map2ItemEmptyEntry
	(*emptypb.Empty)(nil), // 11: google.protobuf.Empty
}
var file_examples_tests_message_proto_depIdxs = []int32{
	0,  // 0: tests.TestMessage.enum_value:type_name -> tests.TestEnum
	1,  // 1: tests.TestMessage.message_nil:type_name -> tests.TestMessage
	1,  // 2: tests.TestMessage.message_skip:type_name -> tests.TestMessage
	1,  // 3: tests.TestMessage.message_empty:type_name -> tests.TestMessage
	3,  // 4: tests.TestMessage.map1_empty:type_name -> tests.TestMessage.Map1EmptyEntry
	4,  // 5: tests.TestMessage.map2_empty:type_name -> tests.TestMessage.Map2EmptyEntry
	5,  // 6: tests.TestMessage.map1_nested:type_name -> tests.TestMessage.Map1NestedEntry
	6,  // 7: tests.TestMessage.map2_nested:type_name -> tests.TestMessage.Map2NestedEntry
	7,  // 8: tests.TestMessage.map1_item:type_name -> tests.TestMessage.Map1ItemEntry
	8,  // 9: tests.TestMessage.map2_item_nil:type_name -> tests.TestMessage.Map2ItemNilEntry
	9,  // 10: tests.TestMessage.map2_item_skip:type_name -> tests.TestMessage.Map2ItemSkipEntry
	10, // 11: tests.TestMessage.map2_item_empty:type_name -> tests.TestMessage.Map2ItemEmptyEntry
	0,  // 12: tests.RepeatedM.enum_value_empties:type_name -> tests.TestEnum
	0,  // 13: tests.RepeatedM.enum_value_nested:type_name -> tests.TestEnum
	0,  // 14: tests.RepeatedM.enum_values:type_name -> tests.TestEnum
	1,  // 15: tests.RepeatedM.message_nils:type_name -> tests.TestMessage
	1,  // 16: tests.RepeatedM.message_skips:type_name -> tests.TestMessage
	1,  // 17: tests.RepeatedM.message_nested:type_name -> tests.TestMessage
	1,  // 18: tests.RepeatedM.message_empties:type_name -> tests.TestMessage
	11, // 19: tests.TestMessage.Map2EmptyEntry.value:type_name -> google.protobuf.Empty
	11, // 20: tests.TestMessage.Map2NestedEntry.value:type_name -> google.protobuf.Empty
	11, // 21: tests.TestMessage.Map2ItemNilEntry.value:type_name -> google.protobuf.Empty
	11, // 22: tests.TestMessage.Map2ItemSkipEntry.value:type_name -> google.protobuf.Empty
	11, // 23: tests.TestMessage.Map2ItemEmptyEntry.value:type_name -> google.protobuf.Empty
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_examples_tests_message_proto_init() }
func file_examples_tests_message_proto_init() {
	if File_examples_tests_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_examples_tests_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_tests_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_examples_tests_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_examples_tests_message_proto_goTypes,
		DependencyIndexes: file_examples_tests_message_proto_depIdxs,
		EnumInfos:         file_examples_tests_message_proto_enumTypes,
		MessageInfos:      file_examples_tests_message_proto_msgTypes,
	}.Build()
	File_examples_tests_message_proto = out.File
	file_examples_tests_message_proto_rawDesc = nil
	file_examples_tests_message_proto_goTypes = nil
	file_examples_tests_message_proto_depIdxs = nil
}
